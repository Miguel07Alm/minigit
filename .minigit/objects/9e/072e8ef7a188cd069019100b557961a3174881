use globset::{Glob, GlobSetBuilder};
use sha1::{Digest, Sha1};
use std::{collections::HashMap, fs, path::Path};
use toml::Value;

pub fn hash_object(data: &[u8], obj_type: &str) -> String {
    let mut hasher = Sha1::new();
    hasher.update(format!("{} {}\0", obj_type, data.len()).as_bytes());
    hasher.update(data);
    hex::encode(hasher.finalize())
}
pub fn process_entry(entry: &Path) {
    // Leer las rutas ignoradas desde .minigitignore
    let ignored_patterns = match fs::read_to_string(".minigitignore") {
        Ok(contents) => contents
            .lines()
            .map(|s| s.trim().to_string())
            .collect::<Vec<String>>(),
        Err(_) => Vec::new(),
    };
    println!("{:?}", ignored_patterns);

    // Crear el conjunto de patrones ignorados
    let mut builder = GlobSetBuilder::new();
    for pattern in ignored_patterns {
        // Preprocesar los patrones para asegurarse de que sean interpretados correctamente
        let pattern = if pattern.starts_with("/") {
            format!("**{}", pattern)
        } else {
            pattern
        };
        builder.add(Glob::new(&pattern).unwrap());
    }
    let ignored_set = builder.build().unwrap();

    // Verificar si una ruta debe ser ignorada
    let should_ignore = |path: &Path| -> bool {
        let path_str = path.to_str().unwrap_or("");
        println!("path_str: {}", path_str);
        // Verificar tanto la ruta relativa como absoluta
        ignored_set.is_match(path_str)
            || ignored_set.is_match(&*path.canonicalize().unwrap().to_string_lossy())
    };
    println!("should_ignore: {}; path: {:?}", should_ignore(entry), entry);
    if should_ignore(entry) {
        println!("{:?} is ignored!", &entry);
        return;
    }
    if entry.is_dir() {
        println!("{:?} is a directory. Entering directory.", entry);
        match fs::read_dir(entry) {
            Ok(sub_entries) => {
                for sub_entry in sub_entries {
                    match sub_entry {
                        Ok(sub_entry) => process_entry(&sub_entry.path()),
                        Err(err) => eprintln!("Error reading subdirectory: {}", err),
                    }
                }
            }
            Err(err) => eprintln!("Error reading directory: {}", err),
        }
    } else {
        let content = match fs::read(entry) {
            Ok(content) => content,
            Err(err) => {
                eprintln!("Failed to read file {:?}: {}", entry, err);
                return;
            }
        };

        let hash = hash_object(&content, "blob");

        let dir_path = format!(".minigit/objects/{}", &hash[0..2]);

        let file_path = format!("{}/{}", dir_path, &hash[2..]);

        if !Path::new(&file_path).exists() {
            match fs::create_dir_all(&dir_path) {
                Ok(_) => {}
                Err(err) => {
                    eprintln!("Failed to create directories {}: {}", dir_path, err);
                    return;
                }
            }

            match fs::write(&file_path, &content) {
                Ok(_) => {}
                Err(err) => {
                    eprintln!("Failed to write object {}: {}", file_path, err);
                    return;
                }
            }
        }

        println!("Added file {} to index with hash {}", entry.display(), hash);
    }
}

pub fn collect_entries(path: &str, index: &mut HashMap<String, String>) {
    // Leer las rutas ignoradas desde .minigitignore
    let ignored_patterns = match fs::read_to_string(".minigitignore") {
        Ok(contents) => contents
            .lines()
            .map(|s| s.trim().to_string())
            .collect::<Vec<String>>(),
        Err(_) => Vec::new(),
    };
    println!("{:?}", ignored_patterns);

    // Crear el conjunto de patrones ignorados
    let mut builder = GlobSetBuilder::new();
    for pattern in ignored_patterns {
        // Preprocesar los patrones para asegurarse de que sean interpretados correctamente
        let pattern = if pattern.starts_with("/") {
            format!("**{}", pattern)
        } else {
            pattern
        };
        builder.add(Glob::new(&pattern).unwrap());
    }
    let ignored_set = builder.build().unwrap();

    // Verificar si una ruta debe ser ignorada
    let should_ignore = |path: &Path| -> bool {
        let path_str = path.to_str().unwrap_or("");
        println!("path_str: {}", path_str);
        // Verificar tanto la ruta relativa como absoluta
        ignored_set.is_match(path_str)
            || ignored_set.is_match(&*path.canonicalize().unwrap().to_string_lossy())
    };
    if should_ignore(Path::new(path)) {
        println!("{} is ignored!", &path);
        return;
    }
    let entries = match fs::read_dir(path) {
        Ok(entries) => entries,
        Err(err) => {
            eprintln!("Error reading directory {}: {}", path, err);
            return;
        }
    };

    for entry in entries {
        let entry = match entry {
            Ok(entry) => entry,
            Err(err) => {
                eprintln!("Error reading entry: {}", err);
                continue;
            }
        };
        let path = entry.path();

        if path.is_dir() {
            collect_entries(path.to_str().unwrap(), index);
        } else {
            let content = match fs::read(&path) {
                Ok(content) => content,
                Err(err) => {
                    eprintln!("Failed to read file {:?}: {}", path, err);
                    continue;
                }
            };
            let hash = hash_object(&content, "blob");
            index.insert(path.to_str().unwrap().to_string(), hash);
        }
    }
}

pub fn write_tree(index: &HashMap<String, String>) -> String {
    let mut tree_entries = Vec::new();

    for (path, hash) in index {
        // Crear una entrada en el formato: "<mode> <path>\0<hash>"
        let entry = format!("{} {}\0{}", "100644", path, hash);
        tree_entries.push(entry);
    }

    // Unir todas las entradas en un solo contenido de árbol
    let tree_content = tree_entries.join("\n");

    // Calcular el hash del contenido del árbol
    let tree_hash = hash_object(tree_content.as_bytes(), "tree");

    // Guardar el objeto árbol en el sistema de archivos
    let dir_path = format!(".minigit/objects/{}", &tree_hash[0..2]);
    let file_path = format!("{}/{}", dir_path, &tree_hash[2..]);

    fs::create_dir_all(&dir_path).expect("Failed to create directories");
    fs::write(&file_path, tree_content).expect("Failed to write tree object");

    tree_hash
}

pub fn get_head_commit() -> Option<String> {
    match fs::read_to_string(".minigit/HEAD") {
        Ok(commit_hash) => Some(commit_hash.trim().to_string()),
        Err(_) => None,
    }
}

pub fn get_commit_tree(
    commit_hash: &str,
) -> Result<HashMap<String, String>, Box<dyn std::error::Error>> {
    println!("commit_hash: {}", commit_hash);
    let commit_path = format!(
        ".minigit/objects/{}/{}",
        &commit_hash[0..2],
        &commit_hash[2..]
    );
    let commit_content = fs::read_to_string(commit_path)?;
    println!("commit_content: \n{}", commit_content);

    let tree_hash = commit_content
        .lines()
        .find(|line| line.starts_with("tree"))
        .ok_or("No tree hash found")?;
    let tree_hash = tree_hash.trim_start_matches("tree").trim().to_string();
    println!("tree_hash: \n{}", tree_hash);

    get_tree(&tree_hash)
}

fn get_tree(tree_hash: &str) -> Result<HashMap<String, String>, Box<dyn std::error::Error>> {
    let tree_path = format!(".minigit/objects/{}/{}", &tree_hash[0..2], &tree_hash[2..]);
    println!("tree_path: \n{}", tree_path);

    let tree_content = fs::read_to_string(tree_path)?;
    println!("tree_content: \n{}", tree_content);

    let mut tree = HashMap::new();
    for entry in tree_content.split('\0') {
        if entry.trim().is_empty() {
            continue; // Omitir entradas vacías
        }

        // Separar metadata del hash
        let parts: Vec<&str> = entry.splitn(2, ' ').collect();
        if parts.len() != 2 {
            return Err("Invalid tree entry format".into());
        }
        let metadata = parts[0];
        let hash = parts[1];

        // Separar metadata para obtener la ruta
        let path = metadata
            .split_whitespace()
            .nth(1)
            .ok_or("Invalid tree entry format")?;
        tree.insert(path.to_string(), hash.to_string());
    }

    Ok(tree)
}

pub fn compare_trees(tree1: &HashMap<String, String>, tree2: &HashMap<String, String>) {
    for (path, hash) in tree1 {
        match tree2.get(path) {
            Some(other_hash) if hash == other_hash => (),
            Some(_) => println!("Modified: {}", path),
            None => println!("Deleted: {}", path),
        }
    }

    for path in tree2.keys() {
        if !tree1.contains_key(path) {
            println!("New file: {}", path);
        }
    }
}

pub fn get_author_info() -> (String, String) {
    let config_path = Path::new(".minigit/config");
    let config_content = fs::read_to_string(config_path).expect("Failed to read config file");
    let config: Value = config_content.parse().expect("Failed to parse config file");

    let name = config
        .get("user")
        .and_then(|u| u.get("name"))
        .and_then(|n| n.as_str())
        .expect("User name not found in config")
        .to_string();

    let email = config
        .get("user")
        .and_then(|u| u.get("email"))
        .and_then(|e| e.as_str())
        .expect("User email not found in config")
        .to_string();

    (name, email)
}
